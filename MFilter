//It doesn't work anyway, it can't makes those points disappear.
#include<opencv2\opencv.hpp>

#include <algorithm>
using namespace cv;
/*int main()
{
	/*Mat picture = imread("airport.jpg");//图片必须添加到工程目录下
										  //也就是和test.cpp文件放在一个文件夹下！！！
	imshow("测试程序", picture);
	Mat src = imread("partial.jpg");
	imshow("before", src);
	int i, j;
	int cPointR, cPointG, cPointB, cPoint;//currentPoint;  
	for (i = 1; i < src.rows; i++)
	{
		for (j = 1; j < src.cols; j++)
		{
			cPointB = src.at<Vec3b>(i, j)[0];
			cPointG = src.at<Vec3b>(i, j)[1];
			cPointR = src.at<Vec3b>(i, j)[2];
			if (cPointB >= 245 & cPointR >= 245 & cPointG >= 245)
			{
				src.at<Vec3b>(i, j)[0] = 255;
				src.at<Vec3b>(i, j)[1] = 255;
				src.at<Vec3b>(i, j)[2] = 255;
			}
			else
			{
				src.at<Vec3b>(i, j)[0] = 0;
				src.at<Vec3b>(i, j)[1] = 0;
				src.at<Vec3b>(i, j)[2] = 0;
			}
		}
	}
	imshow("all white", src);
	

	src = imread("partial.jpg");
	for (i = 1; i < src.rows; i++)
	{
		for (j = 1; j < src.cols; j++)
		{
			cPointB = src.at<Vec3b>(i, j)[0];
			cPointG = src.at<Vec3b>(i, j)[1];
			cPointR = src.at<Vec3b>(i, j)[2];
			if (cPointB <= 11)// & cPointR <= 11 & cPointG <= 11)
			{
				src.at<Vec3b>(i, j)[0] = 255;
				src.at<Vec3b>(i, j)[1] = 255;
				src.at<Vec3b>(i, j)[2] = 255;
			}
			else
			{
				src.at<Vec3b>(i, j)[0] = 0;
				src.at<Vec3b>(i, j)[1] = 0;
				src.at<Vec3b>(i, j)[2] = 0;
			}
		}
	}
	imshow("keep black", src);

	src = imread("aaaaa.jpg");
	imshow("color", src);
	int average = 0;
	for (i = 1; i < src.rows; i++)
	{
		for (j = 1; j < src.cols; j++)
		{
			cPointB = src.at<Vec3b>(i, j)[0];
			cPointG = src.at<Vec3b>(i, j)[1];
			cPointR = src.at<Vec3b>(i, j)[2];

			average = (cPointB + cPointG + cPointR) / 3;

			src.at<Vec3b>(i, j)[0] = average;
			src.at<Vec3b>(i, j)[1] = average;
			src.at<Vec3b>(i, j)[2] = average;
		}
	}
	imshow("bandw", src);

	waitKey(20170115);
}*/

//34°39'30.47" 北 109°14'03.08" 东

int a[9];


int find_median()
{
	int i, j, t;
	for (j = 0; j<9; j++)
		for (i = 0; i<9 - 1 - j; i++)
			if (a[i]>a[i + 1]) /* 由小到大,由大到小时改为< */
			{
				t = a[i];
				a[i] = a[i + 1];
				a[i + 1] = t;
			}
	return a[4];
}

int main()
{
	Mat src = imread("filter.jpg");
	imshow("before", src);
	int i, j;
	int cPoint;//currentPoint;  
	for (int x = 0; x < 1; x++)//i do not know
	{
		for (i = 2; i < src.rows - 1; i++)
		{
			for (j = 2; j < src.cols - 1; j++)
			{
				a[0] = src.at<Vec3b>(i - 1, j - 1)[0];
				a[1] = src.at<Vec3b>(i - 1, j)[0];
				a[2] = src.at<Vec3b>(i - 1, j + 1)[0];
				a[3] = src.at<Vec3b>(i, j - 1)[0];
				a[4] = src.at<Vec3b>(i, j)[0];
				a[5] = src.at<Vec3b>(i, j + 1)[0];
				a[6] = src.at<Vec3b>(i + 1, j - 1)[0];
				a[7] = src.at<Vec3b>(i + 1, j)[0];
				a[8] = src.at<Vec3b>(i + 1, j + 1)[0];

				cPoint = find_median();

				src.at<Vec3b>(i, j)[0] = cPoint;
				src.at<Vec3b>(i, j)[1] = cPoint;
				src.at<Vec3b>(i, j)[2] = cPoint;

			}
		}
	}
	imshow("after", src);
	

	waitKey(20170306);
}

